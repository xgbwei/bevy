window.SIDEBAR_ITEMS = {"enum":[["BatchResult","The result of a batching operation."],["RenderCommandResult","The result of a [`RenderCommand`]."]],"fn":[["batch_phase_system","This system batches the [`PhaseItem`]s of all [`RenderPhase`]s of this type."],["sort_phase_system","This system sorts the [`PhaseItem`]s of all [`RenderPhase`]s of this type."]],"struct":[["DrawFunctionId","An identifier for a [`Draw`] function stored in [`DrawFunctions`]."],["DrawFunctions","Stores all draw functions for the [`PhaseItem`] type hidden behind a reader-writer lock."],["DrawFunctionsInternal","Stores all [`Draw`] functions for the [`PhaseItem`] type."],["RenderCommandState","Wraps a [`RenderCommand`] into a state so that it can be used as a [`Draw`] function."],["RenderPhase","A collection of all rendering instructions, that will be executed by the GPU, for a single render phase for a single view."],["SetItemPipeline","A [`RenderCommand`] that sets the pipeline for the [`CachedRenderPipelinePhaseItem`]."],["TrackedRenderPass","A [`RenderPass`], which tracks the current pipeline state to skip redundant operations."],["ViewRangefinder3d","A distance calculator for the draw order of `PhaseItem`s."]],"trait":[["AddRenderCommand","Registers a [`RenderCommand`] as a [`Draw`] function. They are stored inside the [`DrawFunctions`] resource of the app."],["BatchedPhaseItem","A [`PhaseItem`] that can be batched dynamically."],["CachedRenderPipelinePhaseItem","A [`PhaseItem`] item, that automatically sets the appropriate render pipeline, cached in the [`PipelineCache`]."],["Draw","A draw function used to draw [`PhaseItem`]s."],["PhaseItem","An item (entity of the render world) which will be drawn to a texture or the screen, as part of a [`RenderPhase`]."],["RenderCommand","[`RenderCommand`]s are modular standardized pieces of render logic that can be composed into [`Draw`] functions."]]};