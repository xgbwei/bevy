window.SIDEBAR_ITEMS = {"fn":[["dangling_with_align","Creates a dangling pointer with specified alignment. See [`NonNull::dangling`]."]],"struct":[["Aligned","Used as a type argument to [`Ptr`], [`PtrMut`] and [`OwningPtr`] to specify that the pointer is aligned."],["OwningPtr","Type-erased Box-like pointer to some unknown type chosen when constructing this type. Conceptually represents ownership of whatever data is being pointed to and so is responsible for calling its `Drop` impl. This pointer is not responsible for freeing the memory pointed to by this pointer as it may be pointing to an element in a `Vec` or to a local in a function etc."],["Ptr","Type-erased borrow of some unknown type chosen when constructing this type."],["PtrMut","Type-erased mutable borrow of some unknown type chosen when constructing this type."],["ThinSlicePtr","Conceptually equivalent to `&'a [T]` but with length information cut out for performance reasons"],["Unaligned","Used as a type argument to [`Ptr`], [`PtrMut`] and [`OwningPtr`] to specify that the pointer is not aligned."]],"trait":[["IsAligned","Trait that is only implemented for [`Aligned`] and [`Unaligned`] to work around the lack of ability to have const generics of an enum."],["UnsafeCellDeref","Extension trait for helper methods on [`UnsafeCell`]"]]};